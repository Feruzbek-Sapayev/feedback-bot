import asyncio
import logging
import sys
from os import getenv

from aiogram import Bot, Dispatcher, html, types
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types.inline_keyboard_button import InlineKeyboardButton
from aiogram.types.inline_keyboard_markup import InlineKeyboardMarkup
from aiogram.types.reply_keyboard_markup import ReplyKeyboardMarkup
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove
from aiogram.types.keyboard_button import KeyboardButton
from db import DataBase as db
from aiogram.enums.chat_type import ChatType


TOKEN = "7716250999:AAGVucoUyH03cc0WQHKI8LiJa_0ymBH_XTg"
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

#db
db.create_table_users()
db.create_table_applications()
db.create_table_answers()

class UserState(StatesGroup):
    main = State()
    enterprise = State()
    passport = State()
    problem = State()
    media = State()
    suggestions = State()
    reply = State()
    send_reply = State()
    select_app = State()
    view_app = State()

def get_reply_btn(id, message_id, app_id):
    reply_btn = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ñ–∞–≤–æ–± —ë–∑–∏—à', callback_data=f'reply_{id}_{message_id}_{app_id}')]
    ])
    return reply_btn

def get_apps_btn(applications):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[])
    markup.keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –û—Ä–∫–∞–≥–∞")])
    for i in range(0, len(applications)//2, 2):
        text1 = applications[i][0]
        text2 = applications[i+1][0]
        markup.keyboard.append([KeyboardButton(text=str(text1)), KeyboardButton(text=str(text2))])
    if len(applications)%2 == 1:
        text = applications[-1][0]
        markup.keyboard.append([KeyboardButton(text=str(text))])
    return markup

def get_answer_btn(msg_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ñ–∞–≤–æ–± —ë–∑–∏—à", url=f"https://t.me/c/4500975902/{msg_id}")],
    ])
    return markup

cancel_btn = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text='‚úÖ –¢—É–≥–∞—Ç–∏—à')]
])
main_markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="‚úçüèª –ü—Ä–µ—Ç–µ–Ω–∑–∏—è —é–±–æ—Ä–∏—à")],
    [KeyboardButton(text="üì¨ –ú—É—Ä–æ–∂–∞–∞—Ç–ª–∞—Ä–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à")]
])
next_btn = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="‚úÖ –Æ–±–æ—Ä–∏—à")],
    [KeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä –∫–∏–ª–∏—à")]
])
go_to_back_btn = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="‚¨ÖÔ∏è –û—Ä–∫–∞–≥–∞")]
])
exit_btn = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä –∫–∏–ª–∏—à")]
])

@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    print(message.chat.id)
    user = db.select_user(message.from_user.id)
    if user is None:
        db.add_user(message.from_user.id)
    await message.answer(f"Assalomu aleykum, {message.from_user.full_name}", reply_markup=main_markup)
    await state.set_state(UserState.main)

@dp.message(UserState.main)
async def main_handler(message: types.Message, state: FSMContext):
    if message.text == "‚úçüèª –ü—Ä–µ—Ç–µ–Ω–∑–∏—è —é–±–æ—Ä–∏—à":
        await message.answer("–ö–æ—Ä—Ö–æ–Ω–∞–Ω–≥–∏–∑ –Ω–æ–º–∏–Ω–∏ —ë–∑–∏–Ω–≥:", reply_markup=exit_btn)
        await state.set_state(UserState.enterprise)
    elif message.text == "üì¨ –ú—É—Ä–æ–∂–∞–∞—Ç–ª–∞—Ä–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à":
        applications = db.select_user_applications(message.from_user.id)
        if applications:
            markup = get_apps_btn(applications)
            await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —Ä–∞–∫–∞–º–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=markup)
            await state.set_state(UserState.select_app)
        else:
            await message.answer('üì≠')
            await message.answer('–°–∏–∑ —Ö–∞–ª–∏ –º—É—Ä–æ–∂–∞–∞—Ç —é–±–æ—Ä–º–∞–≥–∞–Ω—Å–∏–∑!')

@dp.message(UserState.select_app)
async def select_app_handler(message: Message, state: FSMContext):
    if message.text:
        if message.text == '‚¨ÖÔ∏è –û—Ä–∫–∞–≥–∞':
            await message.answer('–ê—Å–æ—Å–∏–π –º–µ–Ω—é!', reply_markup=main_markup)
            await state.set_state(UserState.main)
        else:
            app = db.select_application_by_id(message.from_user.id, message.text)
            if app:
                answers = db.select_application_answers(app[0])
                if answers:
                    await state.set_state(UserState.view_app)
                    await message.answer(f"<b>‚Ññ{app[0]} —Å–æ–Ω–ª–∏ –º—É—Ä–æ–∂–∞–∞—Ç —É—á—É–Ω –∂–∞–≤–æ–±:</b>", parse_mode='html', reply_markup=go_to_back_btn)
                    for msg in answers:
                        author = msg[-1]
                        markup = get_reply_btn(author, app[2], app[0])
                        await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=msg[2], reply_markup=markup)
                else:
                    await message.answer("–£—à–±—É –º—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑ —É—á—É–Ω –∂–∞–≤–æ–± –∫–µ–ª–º–∞–≥–∞–Ω!")
            else:
                await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —Ä–∞–∫–∞–º–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:")
    else:
        await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —Ä–∞–∫–∞–º–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:")

@dp.message(UserState.view_app)
async def view_app_handler(message: Message, state: FSMContext):
    if message.text and message.text == "‚¨ÖÔ∏è –û—Ä–∫–∞–≥–∞":
        applications = db.select_user_applications(message.from_user.id)
        if applications:
            markup = get_apps_btn(applications)
            await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —Ä–∞–∫–∞–º–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=markup)
            await state.set_state(UserState.select_app)
        else:
            await message.answer('üì≠')
            await message.answer('–°–∏–∑ —Ö–∞–ª–∏ –º—É—Ä–æ–∂–∞–∞—Ç —é–±–æ—Ä–º–∞–≥–∞–Ω—Å–∏–∑!')
    else:
        await message.answer("–•–∞—Ç–æ –±—É–π—Ä—É–∫! –Ø–Ω–≥–∏ –º–æ—Ä–æ–∂–∞–∞—Ç —é–±–æ—Ä–∏—à —É—á—É–Ω <b>–ê—Å–æ—Å–∏–π –º–µ–Ω—é–≥–∞</b> –∫–∞–π—Ç–∏–Ω–≥!", reply_markup=go_to_back_btn)
        

@dp.message(UserState.enterprise)
async def enterprise_handler(message: Message, state: FSMContext):
    if message.text:
        if message.text == "‚ùå –ë–µ–∫–æ—Ä –∫–∏–ª–∏—à":
            await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —é–±–æ—Ä–∏—à –±–µ–∫–æ—Ä –∫–∏–ª–∏–Ω–¥–∏!", reply_markup=main_markup)
            await state.set_state(UserState.main)
        else:
            await state.set_data({'enterprise': message.text})
            await message.answer("–ú–∞“≥—Å—É–ª–æ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∏ —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=exit_btn)
            await state.set_state(UserState.passport)
    else:
        await message.answer("–ö–æ—Ä—Ö–æ–Ω–∞–Ω–≥–∏–∑ –Ω–æ–º–∏–Ω–∏ —ë–∑–∏–Ω–≥:")

@dp.message(UserState.passport)
async def passport_handler(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data({'passport': message.photo[-1].file_id})
        await message.answer("–ü—Ä–µ—Ç–µ–Ω–∑–∏—è–Ω–∏ —Ç—û–ª–∏“õ —Ç–∞—ä—Ä–∏—Ñ–ª–∞–±, –±–∞—Ä—á–∞ –¥–µ—Ç–∞–ª–ª–∞—Ä–Ω–∏ —ë–∑–∏–Ω–≥ —ë–∫–∏ –æ–≤–æ–∑–ª–∏ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–Ω–≥:", reply_markup=exit_btn)
        await state.set_state(UserState.problem)
    elif message.text and message.text == "‚ùå –ë–µ–∫–æ—Ä –∫–∏–ª–∏—à":
        await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —é–±–æ—Ä–∏—à –±–µ–∫–æ—Ä –∫–∏–ª–∏–Ω–¥–∏!", reply_markup=main_markup)
        await state.set_state(UserState.main)
    else:
        await message.answer("–ú–∞“≥—Å—É–ª–æ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∏ —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥(1 —Ç–∞):")

@dp.message(UserState.problem)
async def problem_handler(message: Message, state: FSMContext):
    if message.text:
        if message.text == "‚ùå –ë–µ–∫–æ—Ä –∫–∏–ª–∏—à":
            await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —é–±–æ—Ä–∏—à –±–µ–∫–æ—Ä –∫–∏–ª–∏–Ω–¥–∏!", reply_markup=main_markup)
            await state.set_state(UserState.main)
        else:
            await state.update_data({'problem_text': message.text})
            await message.answer("–ü—Ä–µ—Ç–µ–Ω–∑–∏—è –±—û–π–∏—á–∞ —Ñ–æ—Ç–æ —ë–∫–∏ –≤–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª–ª–∞—Ä–Ω–∏ –∞–ª–æ—Ö–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥ –≤–∞ <b>'‚úÖ –Æ–±–æ—Ä–∏—à'</b> —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.", reply_markup=next_btn)
            await state.set_state(UserState.media)
            await state.update_data({'media': []})
    elif message.voice:
        await state.update_data({'problem_voice': message.voice.file_id})
        await message.answer("–ü—Ä–µ—Ç–µ–Ω–∑–∏—è –±—û–π–∏—á–∞ —Ñ–æ—Ç–æ —ë–∫–∏ –≤–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª–ª–∞—Ä–Ω–∏ –∞–ª–æ—Ö–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥ –≤–∞ <b>'‚úÖ –Æ–±–æ—Ä–∏—à'</b> —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.", reply_markup=next_btn)
        await state.set_state(UserState.media)
        await state.update_data({'media': []})
    else:
        await message.answer("–ü—Ä–µ—Ç–µ–Ω–∑–∏—è–Ω–∏ —Ç—û–ª–∏“õ —Ç–∞—ä—Ä–∏—Ñ–ª–∞–±, –±–∞—Ä—á–∞ –¥–µ—Ç–∞–ª–ª–∞—Ä–Ω–∏ —ë–∑–∏–Ω–≥ —ë–∫–∏ –æ–≤–æ–∑–ª–∏ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∏–Ω–≥:")

@dp.message(UserState.media)
async def media_handler(message: Message, state: FSMContext):
    if message.text and message.text == "‚úÖ –Æ–±–æ—Ä–∏—à":
        media = (await state.get_data()).get('media')
        if media:
            await message.answer("–£—à–±—É “≥–æ–ª–∞—Ç –±—û–π–∏—á–∞ —û–∑ —Ç–∞—Ö–º–∏–Ω–ª–∞—Ä–∏–Ω–≥–∏–∑ (–Ω–µ–≥–∞ –±—É–Ω–¥–∞–π –±—û–ª–≥–∞–Ω–ª–∏–≥–∏) –≤–∞ “õ–∞–Ω–∞“õ–∞ –µ—á–∏–º “õ–∏–ª–∏—à–∏–º–∏–∑ –±—û–π–∏—á–∞ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥:", reply_markup=exit_btn)
            await state.set_state(UserState.suggestions)
        else:
            await message.answer("–ú–µ–¥–∏–∞—Ñ–∞–π–ª —é–±–æ—Ä–º–∞–¥–∏–Ω–≥–∏–∑!", reply_markup=next_btn)
    elif message.text and message.text == "‚ùå –ë–µ–∫–æ—Ä –∫–∏–ª–∏—à":
            await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —é–±–æ—Ä–∏—à –±–µ–∫–æ—Ä –∫–∏–ª–∏–Ω–¥–∏!", reply_markup=main_markup)
            await state.set_state(UserState.main)
    elif message.media_group_id:
            await message.answer("–ò–ª—Ç–∏–º–æ—Å, –º–µ–¥–∏–∞—Ñ–∞–π–ª–ª–∞—Ä–Ω–∏ –∞–ª–æ—Ö–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥!", reply_markup=next_btn)
    elif message.photo:
        media = (await state.get_data()).get('media')
        media.append({'photo': message.photo[-1].file_id})
        await state.update_data({'media': media})
    elif message.video:
        media = (await state.get_data()).get('media')
        media.append({'video': message.video.file_id})
        await state.update_data({'media': media})
    else:
        await message.answer("–ü—Ä–µ—Ç–µ–Ω–∑–∏—è –±—û–π–∏—á–∞ —Ñ–æ—Ç–æ —ë–∫–∏ –≤–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª–ª–∞—Ä–Ω–∏ –∞–ª–æ—Ö–∏–¥–∞ —é–±–æ—Ä–∏–Ω–≥ –≤–∞ <b>'‚úÖ–Æ–±–æ—Ä–∏—à'</b> —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.", reply_markup=next_btn)

@dp.message(UserState.suggestions)
async def suggestions_handler(message: Message, state: FSMContext):
    if message.text:
        if message.text == "‚ùå –ë–µ–∫–æ—Ä –∫–∏–ª–∏—à":
            await message.answer("–ú—É—Ä–æ–∂–∞–∞—Ç —é–±–æ—Ä–∏—à –±–µ–∫–æ—Ä –∫–∏–ª–∏–Ω–¥–∏!", reply_markup=main_markup)
            await state.set_state(UserState.main)
        else:
            await state.update_data(suggestions=message.text)
            user_data = await state.get_data()
            enterprise = user_data['enterprise']
            passport = user_data['passport']
            try:
                problem_text = user_data['problem_text']
                problem_voice = None
            except:
                problem_voice = user_data['problem_voice']
                problem_text = None
            media = user_data['media']
            suggestions = user_data['suggestions']

            group_chat_id = '-4500975902'
            db.add_application(message.from_user.id, 0)  #application yaratamiz
            app = db.select_application_by_user(message.from_user.id, 0)
            feedback_message = (
                f"üìå Murojaat ‚Ññ{app[0]}\n"
                f"üìã Korxona nomi: {enterprise}\n"
                f"üí° Takliflar: {suggestions}"
            )
            msg = None
            if problem_text:
                feedback_message = (
                    f"üìå Murojaat ‚Ññ{app[0]}\n"
                    f"üìã Korxona nomi: {enterprise}\n"
                    f"üö® Muammo: {problem_text}\n"
                    f"üí° Takliflar: {suggestions}"
                )
                msg = await bot.send_message(chat_id=group_chat_id, text=feedback_message)
            else:
                msg = await bot.send_message(chat_id=group_chat_id, text=feedback_message)
                await bot.send_voice(chat_id=group_chat_id, voice=problem_voice, caption='üö® Muammo')
            db.update_application(app[0], msg.message_id) # application message_id yangilaymiz
            await bot.send_photo(chat_id=group_chat_id, photo=passport, caption='üîñ Passport')
            media_group = MediaGroupBuilder(caption=f'‚ùóÔ∏è Muammo')
            for med in media:
                if med.get('photo'):
                    media_group.add(type='photo', media=med.get('photo'), parse_mode='html')
                else:
                    media_group.add(type='video', media=med.get('video'), parse_mode='html')
            await bot.send_media_group(chat_id=group_chat_id, media=media_group.build())
            await message.answer(f"–°–∏–∑–Ω–∏–Ω–≥ ‚Ññ{app[0]} —Å–æ–Ω–ª–∏ –º—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. –ú—É—Ä–æ–∂–∞–∞—Ç 3 –∫—É–Ω –∏—á–∏–¥–∞ —û—Ä–≥–∞–Ω–∏–± —á–∏“õ–∏–ª–∏–±, –Ω–∞—Ç–∏–∂–∞—Å–∏ –±—û–π–∏—á–∞ —Ö—É–ª–æ—Å–∞–≥–∞ –∫–µ–ª–∏–Ω–∞–¥–∏. –í–∞“õ—Ç —Ç–∞–ª–∞–± “õ–∏–ª–∏–Ω–∞–¥–∏–≥–∞–Ω “≥–æ–ª–∞—Ç–ª–∞—Ä–¥–∞ “õ—û—à–∏–º—á–∞ —è–Ω–∞ 3 –∫—É–Ω–≥–∞ —á—û–∑–∏–ª–∏—à–∏ –º—É–º–∫–∏–Ω. –®–æ—à–∏–ª–∏–Ω—á –≤–∞ –æ—Å–æ–Ω “≥–∞–ª —ç—Ç–∏–ª–∞–¥–∏–≥–∞–Ω “≥–æ–ª–∞—Ç–ª–∞—Ä–¥–∞ —É–∑–æ“ì–∏ 12 —Å–æ–∞—Ç–≥–∞—á–∞ —û—Ä–≥–∞–Ω–∏–±, –∂–∞–≤–æ–± –±–µ—Ä–∏–ª–∞–¥–∏.", reply_markup=main_markup)
            await state.set_state(UserState.main)
    else:
        await message.answer("–£—à–±—É “≥–æ–ª–∞—Ç –±—û–π–∏—á–∞ —û–∑ —Ç–∞—Ö–º–∏–Ω–ª–∞—Ä–∏–Ω–≥–∏–∑ (–Ω–µ–≥–∞ –±—É–Ω–¥–∞–π –±—û–ª–≥–∞–Ω–ª–∏–≥–∏) –≤–∞ “õ–∞–Ω–∞“õ–∞ –µ—á–∏–º “õ–∏–ª–∏—à–∏–º–∏–∑ –±—û–π–∏—á–∞ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —ë–∑–∏–Ω–≥:", reply_markup=ReplyKeyboardRemove())
        
        
# Guruhdan kelgan javobni qayta ishlash
@dp.message(lambda message: message.reply_to_message)
async def handle_group_reply(message: types.Message):
    if ChatType.GROUP: 
        reply_message = message.reply_to_message
        application = db.select_application(reply_message.message_id)
        if application:
            user_id = application[1]
            await message.answer(f"<b>–°–∏–∑–Ω–∏–Ω–≥ ‚Ññ{application[0]} —Å–æ–Ω–ª–∏ –º—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑ —É—á—É–Ω –∂–∞–≤–æ–± –∫–µ–ª–¥–∏:</b>", parse_mode='html')
            msg = await message.send_copy(chat_id=user_id, reply_markup=get_reply_btn(message.from_user.id, application[2], application[0]))
            db.add_app_message(application[0], msg.message_id, message.from_user.id)
        else:
            await message.reply("Bu xabar uchun foydalanuvchini topa olmadim.")
        
@dp.message(UserState.send_reply)
async def repl_msg(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('user_id')
    message_id = data.get('message_id')
    app_id = data.get('app_id')
    if message.text == '‚úÖ –¢—É–≥–∞—Ç–∏—à':
        await message.answer('–ß–∞—Ç —Ç—É–≥–∞—Ç–∏–ª–¥–∏!', reply_markup=main_markup)
        await state.clear()
        await state.set_state(UserState.main)
    else:
        await bot.send_message(text=f"<b>‚Ññ{app_id} —Å–æ–Ω–ª–∏ –º—É—Ä–æ–∂–∞–∞—Ç–≥–∞ –∫—É—à–∏–º—á–∞ —Å–∞–≤–æ–ª:</b>", chat_id=user_id, reply_markup=get_answer_btn(message_id))
        await message.send_copy(chat_id=user_id)
        await message.answer("–ñ–∞–≤–æ–± –∞–¥–º–∏–Ω–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏!")

@dp.message()
async def all_msgs(message: types.Message, state: FSMContext):
    if ChatType.GROUP:
        await message.answer("–ë–æ—Ç–Ω–∏ –∏—à–ª–∞—Ç–∏—à —É—á—É–Ω /start –±–æ—Å–∏–Ω–≥!")
        
@dp.callback_query()
async def callbacks_hndler(call: types.CallbackQuery, state: FSMContext):
    if call.data.startswith('reply'):
        _, user_id, message_id, app_id = call.data.split('_')
        await state.update_data(user_id=user_id, message_id=message_id, app_id=app_id)
        await call.message.answer('–ñ–∞–≤–æ–±–Ω–∏ —é–±–æ—Ä–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω:', reply_markup=cancel_btn)
        await state.set_state(UserState.send_reply)

    await call.answer()

async def main() -> None:
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())